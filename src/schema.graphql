type CreateChatResponse {
  ok: Boolean!
  err: String
}

type Mutation {
  CreateChat(username: String!): CreateChatResponse!
  SendMessage(text: String!, chatId: Int!): SendMessageResponse!
  AddComment(text: String!, postId: Int!): AddCommentResponse!
  DeletePost(postId: Int!): DeletePostResponse!
  ToggleLike(postId: Int!): ToggleLikeResponse!
  UploadPost(location: String, caption: String, images: [String]): UploadPostResponse!
  ConfirmSecret(code: String!, email: String!): ConfirmSecretResponse!
  CreateAccount(username: String!, email: String!, firstName: String!, lastName: String!, intro: String): CreateAccountResponse!
  EditUser(profilePhoto: String, intro: String, username: String, firstName: String, lastName: String): EditUserResponse!
  RequestCode(email: String!): RequestCodeResponse!
  ToggleFollowing(username: String!): ToggleFollowingResponse!
}

type Subscription {
  MessageSubscription: Message
}

type SendMessageResponse {
  ok: Boolean!
  err: String
  message: Message
}

type Chat {
  id: Int!
  messages: [Message]
  to: User!
  createdAt: String
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  chatId: Int
  user: User!
  userId: Int
  createdAt: String
  updatedAt: String
}

type AddCommentResponse {
  ok: Boolean!
  err: String
}

type DeletePostResponse {
  ok: Boolean!
  err: String
}

type GetFollowedPostResponse {
  ok: Boolean!
  err: String
  post: [Post]
}

type Query {
  GetFollowedPost(page: Int!): GetFollowedPostResponse!
  GetFullPost(page: Int!): GetFullPostResponse!
  GetPost(postId: Int!): GetPostResponse!
  Me: MeResponse!
  SeeUser(userId: Int!): SeeUserResponse!
  users: [User]
}

type GetFullPostResponse {
  ok: Boolean!
  err: String
  post: [Post]
}

type GetPostResponse {
  ok: Boolean!
  err: String
  post: Post
}

type Comment {
  id: Int!
  text: String!
  user: User!
  userId: Int
  post: Post!
  postId: Int
  createdAt: String
  updatedAt: String
}

type Image {
  id: Int!
  url: String!
  post: Post!
  postId: Int
  createdAt: String
  updatedAt: String
}

type Like {
  id: Int!
  user: User!
  post: Post!
  userId: Int
  postId: Int
  createdAt: String
  updatedAt: String
}

type Post {
  id: Int!
  location: String
  caption: String
  user: User!
  images: [Image]
  likes: [Like]
  comments: [Comment]
  isLiked: Boolean
  createdAt: String
  updatedAt: String
}

type ToggleLikeResponse {
  ok: Boolean!
  err: String
}

type UploadPostResponse {
  ok: Boolean!
  err: String
}

type ConfirmSecretResponse {
  ok: Boolean!
  err: String
  token: String
}

type CreateAccountResponse {
  ok: Boolean!
  err: String
}

type EditUserResponse {
  ok: Boolean!
  err: String
}

type MeResponse {
  ok: Boolean!
  err: String
  user: User
}

type RequestCodeResponse {
  ok: Boolean!
  err: String
  code: String
}

type SeeUserResponse {
  ok: Boolean!
  err: String
  user: User
}

type User {
  id: Int!
  email: String!
  profilePhoto: String
  intro: String
  username: String!
  firstName: String!
  lastName: String!
  loginSecret: String
  following: [User]
  follower: [User]
  isFollowing: Boolean
  posts: [Post]
  likes: [Like]
  comments: [Comment]
  chats: [Chat]
  messages: [Message]
  createdAt: String
  updatedAt: String
}

type ToggleFollowingResponse {
  ok: Boolean!
  err: String
}
